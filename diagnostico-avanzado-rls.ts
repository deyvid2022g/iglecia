import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Cargar variables de entorno
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL!;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY!;

// Cliente normal para pruebas de usuario
const supabase = createClient(supabaseUrl, supabaseAnonKey);

console.log('üîß CONFIGURACI√ìN DETECTADA:');
console.log('URL:', supabaseUrl);
console.log('Anon Key:', supabaseAnonKey ? 'Configurada ‚úÖ' : 'No configurada ‚ùå');
console.log('Service Key:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'Configurada ‚úÖ' : 'No configurada ‚ùå');
console.log('');

async function diagnosticoCompleto() {
  console.log('üîç DIAGN√ìSTICO AVANZADO RLS');
  console.log('============================\n');

  // 1. Verificar conexi√≥n b√°sica
  console.log('1Ô∏è‚É£ VERIFICANDO CONEXI√ìN B√ÅSICA...');
  try {
    const { data: _data, error } = await supabase.from('profiles').select('count').limit(1);
    if (error) {
      console.log('‚ùå Error de conexi√≥n:', error.message);
      console.log('üîç C√≥digo de error:', error.code);
      console.log('üîç Detalles:', error.details);
      console.log('üîç Hint:', error.hint);
    } else {
      console.log('‚úÖ Conexi√≥n exitosa\n');
    }
  } catch (err) {
    console.log('‚ùå Error de conexi√≥n:', err);
  }

  // 2. Intentar acceso directo a profiles
  console.log('\n2Ô∏è‚É£ PROBANDO ACCESO DIRECTO A PROFILES...');
  try {
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);
    
    if (profilesError) {
      console.log('‚ùå Error accediendo a profiles:', profilesError.message);
      console.log('üîç C√≥digo de error:', profilesError.code);
      console.log('üîç Detalles:', profilesError.details);
    } else {
      console.log('‚úÖ Acceso a profiles exitoso');
      console.log('üìä Registros encontrados:', profiles?.length || 0);
    }
  } catch (err) {
    console.log('‚ùå Error accediendo a profiles:', err);
  }

  // 3. Intentar crear un registro de prueba
  console.log('\n3Ô∏è‚É£ PROBANDO INSERCI√ìN DE REGISTRO DE PRUEBA...');
  try {
    const { data: insertData, error: insertError } = await supabase
      .from('profiles')
      .insert({
        email: 'test@example.com',
        full_name: 'Test User',
        role: 'user'
      })
      .select()
      .single();
    
    if (insertError) {
      console.log('‚ùå Error insertando registro de prueba:', insertError.message);
      console.log('üîç C√≥digo de error:', insertError.code);
      console.log('üîç Detalles:', insertError.details);
    } else {
      console.log('‚úÖ Inserci√≥n exitosa:', insertData);
      
      // Limpiar el registro de prueba
      await supabase.from('profiles').delete().eq('email', 'test@example.com');
      console.log('üßπ Registro de prueba eliminado');
    }
  } catch (err) {
    console.log('‚ùå Error en inserci√≥n de prueba:', err);
  }

  // 4. Probar login con usuario normal
  console.log('\n4Ô∏è‚É£ PROBANDO LOGIN CON USUARIO NORMAL...');
  try {
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: 'lugarderefugio005@gmail.com',
      password: 'LugarDeRefugio2024!'
    });
    
    if (loginError) {
      console.log('‚ùå Error de login:', loginError.message);
      console.log('üîç C√≥digo de error:', loginError.code || 'N/A');
      console.log('üîç Detalles completos:', JSON.stringify(loginError, null, 2));
    } else {
      console.log('‚úÖ Login exitoso');
      console.log('üë§ Usuario logueado:', loginData.user?.email);
      
      // Probar acceso a profiles despu√©s del login
      console.log('\n5Ô∏è‚É£ PROBANDO ACCESO A PROFILES DESPU√âS DEL LOGIN...');
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('email', loginData.user?.email)
        .single();
      
      if (profileError) {
        console.log('‚ùå Error accediendo a profile:', profileError.message);
        console.log('üîç C√≥digo de error:', profileError.code);
      } else {
        console.log('‚úÖ Acceso a profile exitoso:', profileData);
      }
      
      // Cerrar sesi√≥n
      await supabase.auth.signOut();
      console.log('üö™ Sesi√≥n cerrada');
    }
  } catch (err) {
    console.log('‚ùå Error en prueba de login:', err);
  }

  console.log('\nüèÅ DIAGN√ìSTICO COMPLETADO');
  console.log('==========================');
  console.log('\nüí° AN√ÅLISIS BASADO EN LOS ERRORES:');
  console.log('\nüîç Si ves errores como:');
  console.log('   ‚Ä¢ "permission denied for table profiles" ‚Üí RLS est√° bloqueando el acceso');
  console.log('   ‚Ä¢ "Database error granting user" ‚Üí Problema en el proceso de autenticaci√≥n');
  console.log('   ‚Ä¢ "row-level security policy" ‚Üí Las pol√≠ticas RLS son muy restrictivas');
  console.log('\nüõ†Ô∏è SOLUCIONES RECOMENDADAS:');
  console.log('1. Ejecutar TODOS los comandos SQL de SOLUCION-EMERGENCIA-RLS.md en Supabase Dashboard');
  console.log('2. Verificar que la pol√≠tica "temp_admin_bypass" se haya creado correctamente');
  console.log('3. Si persiste, puede ser necesario recrear la tabla profiles');
  console.log('4. Considerar deshabilitar RLS temporalmente para diagn√≥stico');
  console.log('\n‚ö†Ô∏è NOTA: Sin clave de servicio, el diagn√≥stico es limitado');
  console.log('   Para diagn√≥stico completo, configura SUPABASE_SERVICE_ROLE_KEY en .env');
}

diagnosticoCompleto().catch(console.error);