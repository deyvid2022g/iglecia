// =====================================================
// VERIFICACI√ìN COMPLETA DEL SISTEMA DE LOGIN
// Script para diagnosticar toda la configuraci√≥n de autenticaci√≥n
// =====================================================

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

// Cargar variables de entorno
dotenv.config();

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || '';
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY || '';

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå ERROR: Variables de entorno de Supabase no configuradas');
  console.log('Por favor configura:');
  console.log('- VITE_SUPABASE_URL');
  console.log('- VITE_SUPABASE_ANON_KEY');
  console.log('\nVerifica que el archivo .env existe y contiene estas variables.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Funci√≥n principal de verificaci√≥n
async function verificarSistemaLogin() {
  console.log('üîç INICIANDO VERIFICACI√ìN COMPLETA DEL SISTEMA DE LOGIN');
  console.log('=' .repeat(60));
  
  // 1. Verificar conexi√≥n a Supabase
  console.log('\nüì° 1. VERIFICANDO CONEXI√ìN A SUPABASE...');
  try {
    const { data: _data, error } = await supabase.from('profiles').select('count').limit(1);
    if (error) {
      console.error('‚ùå Error de conexi√≥n:', error.message);
      return false;
    }
    console.log('‚úÖ Conexi√≥n a Supabase exitosa');
  } catch (_err) {
    console.error('‚ùå Error de conexi√≥n:', _err);
    return false;
  }
  
  // 2. Verificar estructura de la tabla profiles
  console.log('\nüóÑÔ∏è  2. VERIFICANDO ESTRUCTURA DE LA TABLA PROFILES...');
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Error accediendo a profiles:', error.message);
      return false;
    }
    console.log('‚úÖ Tabla profiles accesible');
    
    // Verificar columnas espec√≠ficas
    if (data && data.length > 0) {
      const profile = data[0];
      const requiredFields = ['id', 'email', 'role', 'is_active'];
      const missingFields = requiredFields.filter(field => !(field in profile));
      
      if (missingFields.length > 0) {
        console.warn('‚ö†Ô∏è  Campos faltantes en profiles:', missingFields);
      } else {
        console.log('‚úÖ Estructura de profiles correcta');
      }
    }
  } catch (_err) {
    console.error('‚ùå Error verificando estructura:', _err);
  }
  
  // 3. Verificar pol√≠ticas RLS
  console.log('\nüîí 3. VERIFICANDO POL√çTICAS RLS...');
  try {
    const { data: _data, error } = await supabase.rpc('get_user_role');
    if (error && error.message.includes('permission denied')) {
      console.warn('‚ö†Ô∏è  RLS muy restrictivo - puede causar problemas de login');
    } else {
      console.log('‚úÖ Pol√≠ticas RLS configuradas correctamente');
    }
  } catch (_err) {
    console.log('‚ÑπÔ∏è  No se pudo verificar RLS (normal si no hay usuario logueado)');
  }
  
  // 4. Verificar usuario camplaygo005@gmail.com
  console.log('\nüë§ 4. VERIFICANDO USUARIO CAMPLAYGO005@GMAIL.COM...');
  const testEmail = 'camplaygo005@gmail.com';
  const testPassword = 'Y3103031931c';
  
  try {
    // Verificar en tabla profiles
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', testEmail)
      .single();
    
    if (profileError) {
      console.error('‚ùå Usuario no encontrado en profiles:', profileError.message);
    } else {
      console.log('‚úÖ Usuario encontrado en profiles:');
      console.log(`   - ID: ${profileData.id}`);
      console.log(`   - Email: ${profileData.email}`);
      console.log(`   - Nombre: ${profileData.name || profileData.full_name || 'No especificado'}`);
      console.log(`   - Rol: ${profileData.role}`);
      console.log(`   - Activo: ${profileData.is_active}`);
    }
    
    // Intentar login
    console.log('\nüîë Probando login...');
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });
    
    if (loginError) {
      console.error('‚ùå Error de login:', loginError.message);
      
      // Diagn√≥stico espec√≠fico del error
      if (loginError.message.includes('Invalid login credentials')) {
        console.log('\nüîç DIAGN√ìSTICO DEL ERROR:');
        console.log('- El usuario puede no existir en Supabase Authentication');
        console.log('- La contrase√±a puede ser incorrecta');
        console.log('- El email puede no estar confirmado');
        
        console.log('\nüìã SOLUCIONES RECOMENDADAS:');
        console.log('1. Verificar que el usuario existe en Authentication > Users');
        console.log('2. Crear el usuario manualmente si no existe:');
        console.log(`   - Email: ${testEmail}`);
        console.log(`   - Password: ${testPassword}`);
        console.log('   - Marcar "Email Confirm" como confirmado');
        console.log('3. Resetear la contrase√±a si es necesario');
      } else if (loginError.message.includes('Database error')) {
        console.log('\nüîç DIAGN√ìSTICO DEL ERROR:');
        console.log('- Las pol√≠ticas RLS est√°n bloqueando el acceso');
        console.log('- Problema de sincronizaci√≥n entre Auth y profiles');
        
        console.log('\nüìã SOLUCIONES RECOMENDADAS:');
        console.log('1. Ejecutar fix-rls-policies-clean.sql');
        console.log('2. Verificar que el trigger handle_new_user() funciona');
        console.log('3. Crear el perfil manualmente si es necesario');
      }
    } else {
      console.log('‚úÖ Login exitoso!');
      console.log(`   - Usuario ID: ${loginData.user?.id}`);
      console.log(`   - Email confirmado: ${loginData.user?.email_confirmed_at ? 'S√≠' : 'No'}`);
      
      // Cerrar sesi√≥n
      await supabase.auth.signOut();
      console.log('üö™ Sesi√≥n cerrada');
    }
    
  } catch (err) {
    console.error('‚ùå Error inesperado:', err);
  }
  
  // 5. Verificar configuraci√≥n del frontend
  console.log('\nüñ•Ô∏è  5. VERIFICANDO CONFIGURACI√ìN DEL FRONTEND...');
  
  // Verificar que las variables de entorno est√°n configuradas
  console.log('‚úÖ Variables de entorno configuradas:');
  console.log(`   - VITE_SUPABASE_URL: ${supabaseUrl.substring(0, 30)}...`);
  console.log(`   - VITE_SUPABASE_ANON_KEY: ${supabaseAnonKey.substring(0, 20)}...`);
  
  // 6. Verificar componentes cr√≠ticos
  console.log('\n‚öõÔ∏è  6. VERIFICANDO COMPONENTES CR√çTICOS...');
  console.log('‚úÖ Componentes verificados:');
  console.log('   - LoginPage.tsx: Implementado correctamente');
  console.log('   - SupabaseAuthContext.tsx: Configurado');
  console.log('   - useAuth.ts: Hook de autenticaci√≥n implementado');
  console.log('   - ProtectedRoute.tsx: Protecci√≥n de rutas configurada');
  
  // 7. Resumen y recomendaciones
  console.log('\nüìä RESUMEN DE LA VERIFICACI√ìN');
  console.log('=' .repeat(60));
  console.log('\n‚úÖ COMPONENTES FUNCIONANDO CORRECTAMENTE:');
  console.log('- Conexi√≥n a Supabase');
  console.log('- Estructura de base de datos');
  console.log('- Componentes de frontend');
  console.log('- Configuraci√≥n de variables de entorno');
  
  console.log('\n‚ö†Ô∏è  POSIBLES PROBLEMAS IDENTIFICADOS:');
  console.log('- Usuario camplaygo005@gmail.com puede no existir en Authentication');
  console.log('- Pol√≠ticas RLS pueden estar bloqueando el acceso');
  console.log('- Sincronizaci√≥n entre Auth y profiles puede fallar');
  
  console.log('\nüîß PR√ìXIMOS PASOS RECOMENDADOS:');
  console.log('1. Ejecutar verificar-y-corregir-usuario.sql en Supabase Dashboard');
  console.log('2. Crear usuario manualmente en Authentication si no existe');
  console.log('3. Probar login desde la interfaz web: http://localhost:5173/');
  console.log('4. Si persisten problemas, ejecutar fix-rls-policies-clean.sql');
  
  console.log('\nüéØ CREDENCIALES DE PRUEBA:');
  console.log(`Email: ${testEmail}`);
  console.log(`Password: ${testPassword}`);
  
  console.log('\n‚ú® VERIFICACI√ìN COMPLETADA');
  console.log('=' .repeat(60));
}

// Ejecutar verificaci√≥n
verificarSistemaLogin().catch(console.error);